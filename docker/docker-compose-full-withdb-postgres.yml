#work with dc.env for environment
version: '2.7'

services:
  # 1 - backend
  hotel-server_service:
    build:
      context: ..
      dockerfile: docker/Hotel_server.Dockerfile
    container_name: hotel-server
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - dc.env
    networks:
      - net

  # 2 - database
  db:
    image: postgres:13.3
    container_name: hotel-postgres1
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - dc.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgres
    networks:
      - net

  # 3 - frontend
  hotel-ui_service:
    build:
      context: ..
      dockerfile: docker/Hotel_ui.Dockerfile
    container_name: hotel-ui
    ports:
      - "8086:8086"
    restart: always
    networks:
      - net

  # 4 - activeMQ
  activemq-service:
    image: rmohr/activemq:5.15.9-alpine
    container_name: activemq
    ports:
      - "61616:61616"
      - "8161:8161"
    restart: always
    networks:
      - net

  # 5 - activemq-configuration
  hotel-acivemq_service:
    build:
      context: ..
      dockerfile: docker/Hotel_activemq.Dockerfile
    container_name: hotel-acivemq
    ports:
      - "9095:9095"
    restart: always
    networks:
      - net

  # 6 - listener
  hotel-room_manager_service:
    build:
      context: ..
      dockerfile: docker/Hotel_room_manager.Dockerfile
    container_name: hotel-room-manager
    ports:
      - "8087:8087"
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - dc.env
    networks:
      - net


volumes:
  db:

networks:
  net:



